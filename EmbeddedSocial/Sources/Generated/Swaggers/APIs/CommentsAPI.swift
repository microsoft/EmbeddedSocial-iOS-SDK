//
// CommentsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class CommentsAPI: APIBase {
    /**
     Delete comment
     - parameter commentHandle: (path) Comment handle 
     - parameter authorization: (header) Format is: \&quot;Scheme CredentialsList\&quot;. Possible values are:  - Anon AK&#x3D;AppKey  - SocialPlus TK&#x3D;SessionToken  - Facebook AK&#x3D;AppKey|TK&#x3D;AccessToken  - Google AK&#x3D;AppKey|TK&#x3D;AccessToken  - Twitter AK&#x3D;AppKey|RT&#x3D;RequestToken|TK&#x3D;AccessToken  - Microsoft AK&#x3D;AppKey|TK&#x3D;AccessToken  - AADS2S AK&#x3D;AppKey|[UH&#x3D;UserHandle]|TK&#x3D;AADToken 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func commentsDeleteComment(commentHandle: String, authorization: String, completion: @escaping ((_ data: Object?, _ error: ErrorResponse?) -> Void)) {
        commentsDeleteCommentWithRequestBuilder(commentHandle: commentHandle, authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Delete comment
     - DELETE /v0.7/comments/{commentHandle}

     - examples: [{contentType=application/json, example={ }}, {contentType=application/xml, example=<null>
</null>}]
     - examples: [{contentType=application/json, example={ }}, {contentType=application/xml, example=<null>
</null>}]
     - parameter commentHandle: (path) Comment handle 
     - parameter authorization: (header) Format is: \&quot;Scheme CredentialsList\&quot;. Possible values are:  - Anon AK&#x3D;AppKey  - SocialPlus TK&#x3D;SessionToken  - Facebook AK&#x3D;AppKey|TK&#x3D;AccessToken  - Google AK&#x3D;AppKey|TK&#x3D;AccessToken  - Twitter AK&#x3D;AppKey|RT&#x3D;RequestToken|TK&#x3D;AccessToken  - Microsoft AK&#x3D;AppKey|TK&#x3D;AccessToken  - AADS2S AK&#x3D;AppKey|[UH&#x3D;UserHandle]|TK&#x3D;AADToken 
     - returns: RequestBuilder<Object> 
     */
    open class func commentsDeleteCommentWithRequestBuilder(commentHandle: String, authorization: String) -> RequestBuilder<Object> {
        var path = "/v0.7/comments/{commentHandle}"
        path = path.replacingOccurrences(of: "{commentHandle}", with: "\(commentHandle)", options: .literal, range: nil)
        let URLString = EmbeddedSocialClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Object>.Type = EmbeddedSocialClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Get comment
     - parameter commentHandle: (path) Comment handle 
     - parameter authorization: (header) Format is: \&quot;Scheme CredentialsList\&quot;. Possible values are:  - Anon AK&#x3D;AppKey  - SocialPlus TK&#x3D;SessionToken  - Facebook AK&#x3D;AppKey|TK&#x3D;AccessToken  - Google AK&#x3D;AppKey|TK&#x3D;AccessToken  - Twitter AK&#x3D;AppKey|RT&#x3D;RequestToken|TK&#x3D;AccessToken  - Microsoft AK&#x3D;AppKey|TK&#x3D;AccessToken  - AADS2S AK&#x3D;AppKey|[UH&#x3D;UserHandle]|TK&#x3D;AADToken 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func commentsGetComment(commentHandle: String, authorization: String, completion: @escaping ((_ data: CommentView?, _ error: ErrorResponse?) -> Void)) {
        commentsGetCommentWithRequestBuilder(commentHandle: commentHandle, authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get comment
     - GET /v0.7/comments/{commentHandle}

     - examples: [{contentType=application/json, example={
  "topicHandle" : "aeiou",
  "blobUrl" : "aeiou",
  "language" : "aeiou",
  "blobHandle" : "aeiou",
  "liked" : true,
  "contentStatus" : "Active",
  "commentHandle" : "aeiou",
  "totalReplies" : 6,
  "createdTime" : "2000-01-23T04:56:07.000+00:00",
  "lastUpdatedTime" : "2000-01-23T04:56:07.000+00:00",
  "text" : "aeiou",
  "totalLikes" : 0,
  "blobType" : "Unknown",
  "user" : {
    "userHandle" : "aeiou",
    "firstName" : "aeiou",
    "lastName" : "aeiou",
    "photoUrl" : "aeiou",
    "followerStatus" : "None",
    "visibility" : "Public",
    "photoHandle" : "aeiou"
  }
}}, {contentType=application/xml, example=<null>
  <commentHandle>aeiou</commentHandle>
  <topicHandle>aeiou</topicHandle>
  <createdTime>2000-01-23T04:56:07.000Z</createdTime>
  <lastUpdatedTime>2000-01-23T04:56:07.000Z</lastUpdatedTime>
  <text>aeiou</text>
  <blobType>aeiou</blobType>
  <blobHandle>aeiou</blobHandle>
  <blobUrl>aeiou</blobUrl>
  <language>aeiou</language>
  <totalLikes>123456789</totalLikes>
  <totalReplies>123456789</totalReplies>
  <liked>true</liked>
  <contentStatus>aeiou</contentStatus>
</null>}]
     - examples: [{contentType=application/json, example={
  "topicHandle" : "aeiou",
  "blobUrl" : "aeiou",
  "language" : "aeiou",
  "blobHandle" : "aeiou",
  "liked" : true,
  "contentStatus" : "Active",
  "commentHandle" : "aeiou",
  "totalReplies" : 6,
  "createdTime" : "2000-01-23T04:56:07.000+00:00",
  "lastUpdatedTime" : "2000-01-23T04:56:07.000+00:00",
  "text" : "aeiou",
  "totalLikes" : 0,
  "blobType" : "Unknown",
  "user" : {
    "userHandle" : "aeiou",
    "firstName" : "aeiou",
    "lastName" : "aeiou",
    "photoUrl" : "aeiou",
    "followerStatus" : "None",
    "visibility" : "Public",
    "photoHandle" : "aeiou"
  }
}}, {contentType=application/xml, example=<null>
  <commentHandle>aeiou</commentHandle>
  <topicHandle>aeiou</topicHandle>
  <createdTime>2000-01-23T04:56:07.000Z</createdTime>
  <lastUpdatedTime>2000-01-23T04:56:07.000Z</lastUpdatedTime>
  <text>aeiou</text>
  <blobType>aeiou</blobType>
  <blobHandle>aeiou</blobHandle>
  <blobUrl>aeiou</blobUrl>
  <language>aeiou</language>
  <totalLikes>123456789</totalLikes>
  <totalReplies>123456789</totalReplies>
  <liked>true</liked>
  <contentStatus>aeiou</contentStatus>
</null>}]
     - parameter commentHandle: (path) Comment handle 
     - parameter authorization: (header) Format is: \&quot;Scheme CredentialsList\&quot;. Possible values are:  - Anon AK&#x3D;AppKey  - SocialPlus TK&#x3D;SessionToken  - Facebook AK&#x3D;AppKey|TK&#x3D;AccessToken  - Google AK&#x3D;AppKey|TK&#x3D;AccessToken  - Twitter AK&#x3D;AppKey|RT&#x3D;RequestToken|TK&#x3D;AccessToken  - Microsoft AK&#x3D;AppKey|TK&#x3D;AccessToken  - AADS2S AK&#x3D;AppKey|[UH&#x3D;UserHandle]|TK&#x3D;AADToken 
     - returns: RequestBuilder<CommentView> 
     */
    open class func commentsGetCommentWithRequestBuilder(commentHandle: String, authorization: String) -> RequestBuilder<CommentView> {
        var path = "/v0.7/comments/{commentHandle}"
        path = path.replacingOccurrences(of: "{commentHandle}", with: "\(commentHandle)", options: .literal, range: nil)
        let URLString = EmbeddedSocialClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<CommentView>.Type = EmbeddedSocialClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Get comments for a topic
     - parameter topicHandle: (path) Topic handle 
     - parameter authorization: (header) Format is: \&quot;Scheme CredentialsList\&quot;. Possible values are:  - Anon AK&#x3D;AppKey  - SocialPlus TK&#x3D;SessionToken  - Facebook AK&#x3D;AppKey|TK&#x3D;AccessToken  - Google AK&#x3D;AppKey|TK&#x3D;AccessToken  - Twitter AK&#x3D;AppKey|RT&#x3D;RequestToken|TK&#x3D;AccessToken  - Microsoft AK&#x3D;AppKey|TK&#x3D;AccessToken  - AADS2S AK&#x3D;AppKey|[UH&#x3D;UserHandle]|TK&#x3D;AADToken 
     - parameter cursor: (query) Current read cursor (optional)
     - parameter limit: (query) Number of items to return (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func topicCommentsGetTopicComments(topicHandle: String, authorization: String, cursor: String? = nil, limit: Int32? = nil, completion: @escaping ((_ data: FeedResponseCommentView?, _ error: ErrorResponse?) -> Void)) {
        topicCommentsGetTopicCommentsWithRequestBuilder(topicHandle: topicHandle, authorization: authorization, cursor: cursor, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get comments for a topic
     - GET /v0.7/topics/{topicHandle}/comments

     - examples: [{contentType=application/json, example={
  "cursor" : "aeiou",
  "data" : [ {
    "topicHandle" : "aeiou",
    "blobUrl" : "aeiou",
    "language" : "aeiou",
    "blobHandle" : "aeiou",
    "liked" : true,
    "contentStatus" : "Active",
    "commentHandle" : "aeiou",
    "totalReplies" : 6,
    "createdTime" : "2000-01-23T04:56:07.000+00:00",
    "lastUpdatedTime" : "2000-01-23T04:56:07.000+00:00",
    "text" : "aeiou",
    "totalLikes" : 0,
    "blobType" : "Unknown",
    "user" : {
      "userHandle" : "aeiou",
      "firstName" : "aeiou",
      "lastName" : "aeiou",
      "photoUrl" : "aeiou",
      "followerStatus" : "None",
      "visibility" : "Public",
      "photoHandle" : "aeiou"
    }
  } ]
}}, {contentType=application/xml, example=<null>
  <cursor>aeiou</cursor>
</null>}]
     - examples: [{contentType=application/json, example={
  "cursor" : "aeiou",
  "data" : [ {
    "topicHandle" : "aeiou",
    "blobUrl" : "aeiou",
    "language" : "aeiou",
    "blobHandle" : "aeiou",
    "liked" : true,
    "contentStatus" : "Active",
    "commentHandle" : "aeiou",
    "totalReplies" : 6,
    "createdTime" : "2000-01-23T04:56:07.000+00:00",
    "lastUpdatedTime" : "2000-01-23T04:56:07.000+00:00",
    "text" : "aeiou",
    "totalLikes" : 0,
    "blobType" : "Unknown",
    "user" : {
      "userHandle" : "aeiou",
      "firstName" : "aeiou",
      "lastName" : "aeiou",
      "photoUrl" : "aeiou",
      "followerStatus" : "None",
      "visibility" : "Public",
      "photoHandle" : "aeiou"
    }
  } ]
}}, {contentType=application/xml, example=<null>
  <cursor>aeiou</cursor>
</null>}]
     - parameter topicHandle: (path) Topic handle 
     - parameter authorization: (header) Format is: \&quot;Scheme CredentialsList\&quot;. Possible values are:  - Anon AK&#x3D;AppKey  - SocialPlus TK&#x3D;SessionToken  - Facebook AK&#x3D;AppKey|TK&#x3D;AccessToken  - Google AK&#x3D;AppKey|TK&#x3D;AccessToken  - Twitter AK&#x3D;AppKey|RT&#x3D;RequestToken|TK&#x3D;AccessToken  - Microsoft AK&#x3D;AppKey|TK&#x3D;AccessToken  - AADS2S AK&#x3D;AppKey|[UH&#x3D;UserHandle]|TK&#x3D;AADToken 
     - parameter cursor: (query) Current read cursor (optional)
     - parameter limit: (query) Number of items to return (optional)
     - returns: RequestBuilder<FeedResponseCommentView> 
     */
    open class func topicCommentsGetTopicCommentsWithRequestBuilder(topicHandle: String, authorization: String, cursor: String? = nil, limit: Int32? = nil) -> RequestBuilder<FeedResponseCommentView> {
        var path = "/v0.7/topics/{topicHandle}/comments"
        path = path.replacingOccurrences(of: "{topicHandle}", with: "\(topicHandle)", options: .literal, range: nil)
        let URLString = EmbeddedSocialClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "cursor": cursor, 
            "limit": limit?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<FeedResponseCommentView>.Type = EmbeddedSocialClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Create a new comment
     - parameter topicHandle: (path) Topic handle 
     - parameter request: (body) Post comment request 
     - parameter authorization: (header) Format is: \&quot;Scheme CredentialsList\&quot;. Possible values are:  - Anon AK&#x3D;AppKey  - SocialPlus TK&#x3D;SessionToken  - Facebook AK&#x3D;AppKey|TK&#x3D;AccessToken  - Google AK&#x3D;AppKey|TK&#x3D;AccessToken  - Twitter AK&#x3D;AppKey|RT&#x3D;RequestToken|TK&#x3D;AccessToken  - Microsoft AK&#x3D;AppKey|TK&#x3D;AccessToken  - AADS2S AK&#x3D;AppKey|[UH&#x3D;UserHandle]|TK&#x3D;AADToken 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func topicCommentsPostComment(topicHandle: String, request: PostCommentRequest, authorization: String, completion: @escaping ((_ data: PostCommentResponse?, _ error: ErrorResponse?) -> Void)) {
        topicCommentsPostCommentWithRequestBuilder(topicHandle: topicHandle, request: request, authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create a new comment
     - POST /v0.7/topics/{topicHandle}/comments

     - examples: [{contentType=application/json, example={
  "commentHandle" : "aeiou"
}}, {contentType=application/xml, example=<null>
  <commentHandle>aeiou</commentHandle>
</null>}]
     - examples: [{contentType=application/json, example={
  "commentHandle" : "aeiou"
}}, {contentType=application/xml, example=<null>
  <commentHandle>aeiou</commentHandle>
</null>}]
     - parameter topicHandle: (path) Topic handle 
     - parameter request: (body) Post comment request 
     - parameter authorization: (header) Format is: \&quot;Scheme CredentialsList\&quot;. Possible values are:  - Anon AK&#x3D;AppKey  - SocialPlus TK&#x3D;SessionToken  - Facebook AK&#x3D;AppKey|TK&#x3D;AccessToken  - Google AK&#x3D;AppKey|TK&#x3D;AccessToken  - Twitter AK&#x3D;AppKey|RT&#x3D;RequestToken|TK&#x3D;AccessToken  - Microsoft AK&#x3D;AppKey|TK&#x3D;AccessToken  - AADS2S AK&#x3D;AppKey|[UH&#x3D;UserHandle]|TK&#x3D;AADToken 
     - returns: RequestBuilder<PostCommentResponse> 
     */
    open class func topicCommentsPostCommentWithRequestBuilder(topicHandle: String, request: PostCommentRequest, authorization: String) -> RequestBuilder<PostCommentResponse> {
        var path = "/v0.7/topics/{topicHandle}/comments"
        path = path.replacingOccurrences(of: "{topicHandle}", with: "\(topicHandle)", options: .literal, range: nil)
        let URLString = EmbeddedSocialClientAPI.basePath + path
        let parameters = request.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<PostCommentResponse>.Type = EmbeddedSocialClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

}
